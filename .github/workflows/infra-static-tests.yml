# Name shown in the Actions UI
name: Terraform Checks and Plan

on:
  # Run automatically whenever YOU push to your feature branch
  push:
    branches:
      - jaspreet1388-patch-1      # <-- change if your branch name changes
    paths:
      - "infra/tf-app/**"         # only run if tf-app files change

  # Also run when you open/update a PR (useful later when merging to main)
  pull_request:
    paths:
      - "infra/tf-app/**"

# Required so the workflow can read repo contents and request an OIDC token
permissions:
  contents: read
  id-token: write

jobs:
  # --------------------------- JOB 1: STATIC CHECKS ---------------------------
  static-checks:
    name: Static Terraform Analysis
    runs-on: ubuntu-latest

    # Default working directory for all `run:` steps in this job
    defaults:
      run:
        working-directory: infra/tf-app

    steps:
      # 1) Check out your branch code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Install Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7   # match your local/required_version

      # 3) Init WITHOUT backend: avoids touching Azure during static checks
      - name: Terraform Init (no backend)
        run: terraform init -backend=false

      # 4) Enforce formatting (recursive) — fails the job if not formatted
      - name: Terraform Format Check
        run: terraform fmt -recursive -check

      # 5) Schema & syntax validation
      - name: Terraform Validate
        run: terraform validate

      # 6) Install TFLint for Terraform best-practice linting
      - name: Install TFLint
        run: curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      # 7) Run TFLint in the module directory
      - name: Run TFLint
        run: tflint

      # 8) Install Checkov for security & misconfiguration scanning
      - name: Install Checkov
        run: pip install checkov

      # 9) Run Checkov against this directory
      - name: Run Checkov
        run: checkov -d .

  # ----------------------------- JOB 2: REAL PLAN -----------------------------
  plan:
    name: Terraform Plan (Remote Backend)
    runs-on: ubuntu-latest

    # Don’t start until static checks pass
    needs: static-checks

    defaults:
      run:
        working-directory: infra/tf-app

    steps:
      # 1) Check out code again (each job runs on a fresh runner)
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Login to Azure using OIDC (no client secrets)
      #    REQUIREMENTS in repo Settings -> Secrets and variables -> Actions:
      #      - Secrets:  AZURE_CLIENT_ID_READONLY   (client ID of your "read-only" Entra app)
      #      - Variables: AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID
      #    Also make sure that Entra app:
      #      - has a Federated Credential for this repo/branch (pull_request OR your branch)
      #      - has Reader role on the subscription/RG scope
      #      - has Storage Blob Data Contributor on the tf-state Storage Account
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_READONLY }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      # 3) Install Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      # 4) Full init so Terraform connects to your remote backend (Blob Storage)
      #    Your backend block lives in infra/tf-app/main.tf and points to:
      #      - RG: chha0038-githubactions-rg
      #      - SA: chha0038githubactionslab
      #      - Container: tfstate
      #      - Key: tf-app/terraform.tfstate
      - name: Terraform Init (remote backend)
        run: terraform init -input=false

      # 5) Produce a real plan; -out=tfplan lets you upload it as an artifact
      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan

      # 6) Upload plan so reviewers can down
