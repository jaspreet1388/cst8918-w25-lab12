name: Terraform CI-CD

on:
  push:
    branches: [ main ]        # run on direct pushes to main
    paths:
      - 'infra/tf-app/**'
  pull_request:               # also run on PRs (any branch)
    paths:
      - 'infra/tf-app/**'
  workflow_dispatch:

# OIDC needs these
permissions:
  id-token: write
  contents: read
  pull-requests: write

defaults:
  run:
    working-directory: infra/tf-app

# Export ARM_* so Terraform/AzureRM see the same values that azure/login provides.
# (We don’t use ARM_ACCESS_KEY because you’re on OIDC, not access keys.)
env:
  ARM_CLIENT_ID:        ${{ secrets.AZURE_CLIENT_ID_READONLY }}
  ARM_TENANT_ID:        ${{ vars.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID:  ${{ vars.AZURE_SUBSCRIPTION_ID }}

jobs:
  # ----------------------------- 6.2: TFLint -----------------------------
  tflint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Cache TFLint plugins
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('infra/tf-app/.tflint.hcl') }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Show TFLint version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init
        env:
          # avoids GitHub API rate limits when fetching rulesets
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint
        run: tflint -f compact

  # ----------------------- 6.3: Terraform Plan (OIDC) --------------------
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: tflint
    env:
      # Using read-only identity; provider registration not required
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Log in with OIDC (required so backend/provider can auth)
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_READONLY }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.5.7

      # Real backend init (uses the OIDC token + tenant_id/client_id you added in backend block)
      - name: Terraform Init (remote backend)
        run: terraform init -input=false

      # Format check here is optional; lab example includes it
      - name: Terraform Format (check)
        run: terraform fmt -check

      # Plan with detailed exit codes:
      # 0 = no changes, 1 = error, 2 = changes present
      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          echo "exitcode=$exitcode" >> "$GITHUB_OUTPUT"
          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan failed"
            exit 1
          fi

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: infra/tf-app/tfplan

      # Create a nice summary for the Job Summary page
      - name: Create String Output (Plan)
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Post the plan into the PR thread (only when this run is a PR)
      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })
